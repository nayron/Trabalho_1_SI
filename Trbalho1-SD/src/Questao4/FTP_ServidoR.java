/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Questao4;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

/**
 *
 * @author nayron
 */
public class FTP_ServidoR extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    private Socket socket;
    private ServerSocket ss;
    private boolean clientHasDisconnected = false;
    private File folderDestination = new File("/home/nayron/Documentos/Arquivos"); 

    int fileLength;
    int connectionResult;
    String fileName;
    InputStream isServer;//
    InputStreamReader ipStreamReader;
    BufferedReader serverInput;  //usado para entrada baseada em caracteres
    PrintWriter writer;

    /**
     * Creates new form FTP_ServidoR
     */
    public FTP_ServidoR() {
        initComponents();
        display.setEditable(false);
        setVisible(true);
      
 
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        EscolherPasta = new javax.swing.JButton();
        EXIT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(139, 183, 226));

        jLabel1.setFont(new java.awt.Font("NanumSquare Bold", 1, 18)); // NOI18N
        jLabel1.setText("Servidor - FTP");

        display.setColumns(20);
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        EscolherPasta.setText("Esc. Pasta");
        EscolherPasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EscolherPastaActionPerformed(evt);
            }
        });

        EXIT.setText("Encerrar");
        EXIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXITActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(EscolherPasta, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                        .addComponent(EXIT, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EscolherPasta)
                    .addComponent(EXIT))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {EXIT, EscolherPasta});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EscolherPastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EscolherPastaActionPerformed
        JFileChooser fc = new JFileChooser(); // Abre janela de seleção de pasta
        
        fc.setCurrentDirectory(folderDestination);
        
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); //limita os diretorios
        int returnVal = fc.showOpenDialog(this);
        // Determine se o usuário selecionou uma pasta ou cancelou a operação
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // Este é o lugar onde o arquivo será salvo para
            folderDestination = fc.getSelectedFile();
            // Exibir mensagem com o caminho do arquivo
            display.append("Pasta para transferencia para é: " + folderDestination + "\n");
        } else if (returnVal == JFileChooser.CANCEL_OPTION) {
            display.append("cancelado pelo usuário - os arquivos transferidos estarão em " + folderDestination + "\n");
        }
    }//GEN-LAST:event_EscolherPastaActionPerformed

    private void EXITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXITActionPerformed
        if (clientHasDisconnected == true) {
            System.exit(0);
        } else {
            display.append("O cliente deve desconectar antes de sair\n");
        }
    }//GEN-LAST:event_EXITActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FTP_ServidoR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FTP_ServidoR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FTP_ServidoR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FTP_ServidoR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
   
      FTP_ServidoR serverApp = new FTP_ServidoR(); //Initailize FTP_Server object
		//serverApp.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Close when user closes window
		serverApp.run();
         
          
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EXIT;
    private javax.swing.JButton EscolherPasta;
    private javax.swing.JTextArea display;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
private void run() {
        // Exibi as mensagens iniciais
        display.append("Servidor à espera de conexões.\n");
        display.append("Os arquivos transferidos estarão em " + folderDestination + " a menos que você altere esse destino\n");
        while (true) {
            try {
                ss = new ServerSocket(4444); // seta o secket na porta indicada
                socket = ss.accept(); // Bloqueia até conectar-se ao cliente
                display.append("Conectado ao cliente: " + socket.getRemoteSocketAddress() + "\n");

                // Cria fluxo de dados conectado ao sockete do cliente
                isServer = socket.getInputStream(); //f
                ipStreamReader = new InputStreamReader(isServer);
                serverInput = new BufferedReader(ipStreamReader);
                while (true) {
                    fileName = serverInput.readLine(); // Obtem o nome do arquivo
                    fileLength = Integer.parseInt(serverInput.readLine()); // Obtem o tamanho do Arquivo

                    // Cria BufferedReader com caminho do arquivo a ser tranferido 
                    writer = new PrintWriter(new OutputStreamWriter(
                            new FileOutputStream(folderDestination + File.separator + fileName), "utf-8"));

                    try {
                        String line;
                        while (true) { 
                            line = serverInput.readLine(); // envia o aquivo pelo sockete do servidor
                            writer.println(line); // Escreve o arquivo
                            writer.flush();
                            fileLength -= (line.length() + 1); // Subtrai o comprimento do arquivo
                            if (fileLength <= 0) {
                                break;
                            } // Interrompe quando um arquivo inteiro foi lido e escrito
                        }

                    } catch (NumberFormatException e) {
                        //ignore
                    } catch (Exception e) { // Catch all
                        e.printStackTrace();
                    } finally {
                        display.append("Arquivo transferido para " + folderDestination + "\n"); 
                        writer.close();
                    }//end try
                }//end while

            } catch (IOException e) {
                e.printStackTrace();
            } catch (NumberFormatException e) {
                //ignore
            } finally {
                try {
                    serverInput.close();
                    ss.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                display.append("Cliente desconectado\n");
                clientHasDisconnected = true;
            }
        }
    }

}
