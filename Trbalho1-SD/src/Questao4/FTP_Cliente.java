/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Questao4;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author nayron
 */
public class FTP_Cliente extends javax.swing.JFrame {

    /**
     * Creates new form FTP_Cliente
     */
    private static final long serialVersionUID = 1L;
    private Socket socket;
    private File file; //selecionar arquivo

    //streams for network IO
    OutputStream osClient;
    PrintWriter clientOutput;//used for character based output
    InputStreamReader ipStreamReader;
    BufferedReader br;  //used for character based input

    public FTP_Cliente() {
        initComponents();
        display.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        ConectarServidor = new javax.swing.JButton();
        SelecionarArquivo = new javax.swing.JButton();
        TransfArquivo = new javax.swing.JButton();
        Desconectar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(126, 166, 210));

        display.setColumns(20);
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        jLabel1.setFont(new java.awt.Font("NanumSquare Bold", 1, 18)); // NOI18N
        jLabel1.setText("Cliente - FTP");

        ConectarServidor.setText("Conectar Servidor");
        ConectarServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConectarServidorActionPerformed(evt);
            }
        });

        SelecionarArquivo.setText("Selecionar Arquivo");
        SelecionarArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelecionarArquivoActionPerformed(evt);
            }
        });

        TransfArquivo.setText("Transferir Arquivo");
        TransfArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransfArquivoActionPerformed(evt);
            }
        });

        Desconectar.setText("Desconectar");
        Desconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DesconectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TransfArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelecionarArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Desconectar, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConectarServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ConectarServidor, Desconectar, SelecionarArquivo, TransfArquivo});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ConectarServidor)
                        .addGap(18, 18, 18)
                        .addComponent(SelecionarArquivo)
                        .addGap(18, 18, 18)
                        .addComponent(TransfArquivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Desconectar))
                    .addComponent(jScrollPane1))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Desconectar, SelecionarArquivo, TransfArquivo});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConectarServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConectarServidorActionPerformed

        try {
            // 
            socket = new Socket("localhost", 4444);
            display.append("Conectado ao servidor\n");
        } catch (IOException ioException) {
            // display append message to log
            ioException.printStackTrace();
            display.append("Não foi possível conectar-se ao servidor - você startou o servidor\n");
        }


    }//GEN-LAST:event_ConectarServidorActionPerformed

    private void SelecionarArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelecionarArquivoActionPerformed
        // Object source = evt.getSource();
        final JFileChooser fc = new JFileChooser();

        fc.setFileFilter(new FileNameExtensionFilter("TEXT FILES", "txt", "text", "xml", "htm", "html","log","pdf"));

        int returnVal = fc.showOpenDialog(this);//abre a janela para selecionar o arquivo
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // Este é o lugar onde um o programa abriria o arquivo.
            file = fc.getSelectedFile();
            // mosta o caminho do arquivo a ser transferido
            display.append("Arquivo para ser transferir é: " + file.getPath() + "\n");//fechou a janela sem nenhum arquivo selecionado
        } else if (returnVal == JFileChooser.CANCEL_OPTION) {
            display.append("Cancelei");
            display.append("comando cancelado pelo usuário - nenhum arquivo selecionado\n");
        }
    }//GEN-LAST:event_SelecionarArquivoActionPerformed

    private void TransfArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransfArquivoActionPerformed
        if (socket == null) { // If socket hasn't been connected to or closed
            display.append("Nenhuma conexão com o servidor. Conecte-se ao servidor antes de tentar transferir um arquivo\n");
        } else if (socket.isClosed()) { // Se o soquete estava ligado, e tenha fechado
            display.append("Você se desconectou do servidor - tente reconectar-se \n");
        } else if (file == null) { // se o arquivo não for selecionando
            display.append("Nenhum arquivo selecionado para transferir - selecione primeiro um arquivo\n");
        } else { // Transferir
            display.append("Arquivo sendo transferido " + file + "...\n");
            try {
                // BufferedReader para ler do arquivo selecionado
                br = new BufferedReader(new FileReader(file));
                // Fluxo de saída e gravador para escrever utilizando socket
                osClient = socket.getOutputStream();
                clientOutput = new PrintWriter(osClient);

                clientOutput.println(file.getName()); // Enviar o nome do arquivo para o caminho
                clientOutput.println(file.length()); // envia o taamnho do arquivo

                String line;
                while ((line = br.readLine()) != null) { 
                    clientOutput.println(line); // Escreva arquivo pelo socket
                    clientOutput.flush(); // Certifique-se que a escrita foi realizado
                }
            } catch (IOException ioException) {
                ioException.printStackTrace();
            } finally {
                clientOutput.flush(); // Quando a tranferencia é bem sucessida
                display.append("Transferência completa: " + file + "\n"); 
            }
        }
    }//GEN-LAST:event_TransfArquivoActionPerformed

    private void DesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DesconectarActionPerformed
        try {
            socket.close(); //fecha o socket
            display.append("Disconectado com sucesso\n"); // sockete fechado com sucesso - exiba msg
        } catch (NullPointerException nullPointerException) { //
            display.append("Você não está conectado a nenhum servidor\n");
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }//GEN-LAST:event_DesconectarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FTP_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FTP_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FTP_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FTP_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FTP_Cliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConectarServidor;
    private javax.swing.JButton Desconectar;
    private javax.swing.JButton SelecionarArquivo;
    private javax.swing.JButton TransfArquivo;
    private javax.swing.JTextArea display;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables


}
